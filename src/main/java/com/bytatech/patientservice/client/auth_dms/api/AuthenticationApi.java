/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.patientservice.client.auth_dms.api;

import com.bytatech.patientservice.client.auth_dms.model.Error;
import com.bytatech.patientservice.client.auth_dms.model.TicketBody;
import com.bytatech.patientservice.client.auth_dms.model.TicketEntry;
import com.bytatech.patientservice.client.auth_dms.model.ValidTicketEntry;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-09-03T12:40:37.167+05:30[Asia/Kolkata]")

@Api(value = "Authentication", description = "the Authentication API")
public interface AuthenticationApi {

    @ApiOperation(value = "Create ticket (login)", nickname = "createTicket", notes = "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: ```JSON {     \"userId\": \"jbloggs\",     \"password\": \"password\" } ``` To use the ticket in future requests you should pass it in the request header. For example using Javascript:   ```Javascript     request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(ticket));   ``` ", response = TicketEntry.class, tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = TicketEntry.class),
        @ApiResponse(code = 400, message = "**userId** or **password** is not provided "),
        @ApiResponse(code = 403, message = "Login failed"),
        @ApiResponse(code = 501, message = "SAML is enabled and enforced"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/tickets",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<TicketEntry> createTicket(@ApiParam(value = "The user credential." ,required=true )  @Valid @RequestBody TicketBody ticketBody);


    @ApiOperation(value = "Delete ticket (logout)", nickname = "deleteTicket", notes = "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). ", tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response"),
        @ApiResponse(code = 400, message = "URL path does not include **-me-** or the ticket is not provided by the Authorization header"),
        @ApiResponse(code = 404, message = "Status of the user has changed (for example, the user is locked or the account is disabled) or the ticket has expired"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/tickets/-me-",
        produces = "application/json", 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTicket();


    @ApiOperation(value = "Validate ticket", nickname = "validateTicket", notes = "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   ```Javascript     request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(ticket));   ``` ", response = ValidTicketEntry.class, tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = ValidTicketEntry.class),
        @ApiResponse(code = 400, message = "URL path does not include **-me-** or the ticket is not provided by the Authorization header"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 404, message = "The request is authorized correctly but the status of the user (of the supplied ticket) has changed (for example, the user is locked or the account is disabled) or the ticket has expired"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/tickets/-me-",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<ValidTicketEntry> validateTicket();

}
